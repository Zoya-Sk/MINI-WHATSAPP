<%- include("partials/header") %>
<div class="container mt-4">
  <h4>Chatting with <%= chatUser.username %></h4>
  <div class="border rounded p-3 mb-3" style="height: 300px; overflow-y: auto;">
    <% messages.forEach(msg => { %>
      <div class="mb-2">
        <strong><%= msg.sender.username === chatUser.username ? chatUser.username : "You" %>:</strong>
        <span><%= msg.content %></span>
        <small class="text-muted d-block"><%= new Date(msg.timestamp).toLocaleString() %></small>
      </div>
    <% }) %>
  </div>

 <form id="messageForm">
  <div class="input-group mt-3">
    <input type="text" id="messageInput" class="form-control" placeholder="Type a message" required />
    <button type="submit" class="btn btn-primary">Send</button>
  </div>
</form>

<ul id="messageList" class="list-group mt-3">
  <% messages.forEach(msg => { %>
    <li class="list-group-item">
      <strong><%= msg.sender.username %>:</strong> <%= msg.content %>
    </li>
  <% }) %>
</ul>

</div>
<script src="/socket.io/socket.io.js"></script>
<%- include("partials/footer") %>
<script>
  const socket = io();

  // Join unique room (for 2-user chat)
  const roomId = "<%= [currentUser._id, chatUser._id].sort().join('-') %>";
  socket.emit('joinRoom', roomId);

  const form = document.getElementById('messageForm');
  const input = document.getElementById('messageInput');
  const list = document.getElementById('messageList');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const msg = input.value.trim();
    if (!msg) return;

    // Send message via Socket.IO
    socket.emit('chatMessage', {
      roomId,
      message: {
        sender: "<%= currentUser.username %>",
        content: msg
      }
    });

    // Also save to MongoDB via normal POST (fallback)
    await fetch(`/messages/chat/<%= chatUser._id %>`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: new URLSearchParams({ content: msg })
    });

    input.value = '';
  });

  // Receive real-time message
  socket.on('newMessage', (message) => {
    const li = document.createElement('li');
    li.classList.add('list-group-item');
    li.innerHTML = `<strong>${message.sender}:</strong> ${message.content}`;
    list.appendChild(li);
  });
</script>
